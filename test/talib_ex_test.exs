defmodule TalibExTest do
  use ExUnit.Case
  doctest TalibEx

  @ohlcv [
    open: [
      76.09,
      76.14,
      76.75,
      77.1,
      77.26,
      78.28,
      77.69,
      78.06,
      78.09,
      78.72,
      78.02,
      78.49,
      79.56,
      79.47,
      79.32,
      79,
      78.88,
      78.88,
      78.74,
      78.25,
      78.89,
      79.13,
      79.55,
      78.72,
      78.7,
      78.74,
      77.4,
      77.8,
      78.41,
      78.74,
      79.73,
      79.83,
      80
    ],
    high: [
      76.44,
      76.84,
      77.06,
      77.34,
      77.96,
      78.32,
      78.11,
      78.25,
      78.14,
      78.72,
      78.47,
      79.47,
      79.69,
      79.54,
      79.41,
      79.25,
      79,
      79.36,
      79.21,
      79.09,
      79.72,
      79.76,
      79.72,
      79.51,
      79.35,
      78.81,
      77.44,
      78.79,
      79.29,
      79.79,
      80.11,
      80.42,
      80.87
    ],
    low: [
      75.54,
      75.93,
      76.73,
      76.05,
      77.23,
      77.92,
      77.59,
      77.85,
      77.64,
      77.67,
      77.98,
      78.33,
      79.36,
      78.95,
      78.46,
      78.57,
      78.4,
      78.85,
      78.59,
      78,
      78.85,
      79.06,
      78.3,
      78.65,
      78.67,
      77.19,
      76.35,
      77.79,
      78.4,
      78.68,
      79.38,
      79.79,
      79.95
    ],
    close: [
      75.9,
      76.71,
      76.84,
      76.93,
      77.83,
      78.21,
      78.06,
      78.01,
      78.06,
      77.85,
      78.37,
      79.31,
      79.5,
      78.98,
      78.83,
      78.83,
      78.56,
      79.17,
      79.07,
      78.88,
      79.68,
      79.65,
      78.72,
      79.4,
      78.74,
      77.22,
      76.98,
      78.61,
      79.23,
      79.79,
      79.48,
      80.38,
      80.84
    ],
    volume: [
      27_209_900,
      27_118_600,
      17_809_700,
      27_715_100,
      25_141_500,
      27_604_400,
      28_132_900,
      18_310_700,
      16_763_000,
      25_704_300,
      27_174_300,
      31_645_300,
      26_280_900,
      26_181_500,
      30_305_000,
      21_871_300,
      22_723_600,
      22_406_900,
      24_896_000,
      27_997_900,
      33_024_100,
      25_466_800,
      42_970_800,
      22_852_700,
      20_227_100,
      43_494_500,
      64_489_900,
      47_812_400,
      25_214_100,
      31_438_600,
      38_446_600,
      46_661_000,
      31_916_600
    ]
  ]

  describe "acos/1" do
    test "should return a list" do
      assert {
               :ok,
               [
                 -5_441_979.999999828,
                 13_928_448.571428139,
                 7_991_881.904761473,
                 18_089_631.517164804,
                 34_276_624.66784992,
                 46_698_604.667849675,
                 69_421_331.59092686,
                 65_759_191.59092764,
                 77_158_031.59092775,
                 60_266_634.44807027,
                 76_349_383.42766263,
                 99_111_792.19959265,
                 95_129_837.65413831,
                 71_610_863.07786721,
                 64_911_863.07786743,
                 59_765_674.84257348,
                 49_161_328.175906666,
                 54_872_890.92100507,
                 68_525_536.08229516,
                 85_735_254.43091865,
                 115_722_655.58034456,
                 133_185_604.1517732,
                 115_634_150.63064651,
                 132_640_811.09576282,
                 116_578_114.03693894,
                 74_694_521.4443464,
                 84_752_579.24251245,
                 115_352_515.2425118,
                 137_166_961.3099274,
                 168_605_561.3099274,
                 140_692_276.3784214,
                 181_428_070.02921408,
                 211_263_152.63790965
               ]
             } = TalibEx.acos(1..10)
    end
  end

  describe "ad/1" do
    test "should return a list" do
      assert {
               :ok,
               [
                 -5_441_979.999999828,
                 13_928_448.571428139,
                 7_991_881.904761473,
                 18_089_631.517164804,
                 34_276_624.66784992,
                 46_698_604.667849675,
                 69_421_331.59092686,
                 65_759_191.59092764,
                 77_158_031.59092775,
                 60_266_634.44807027,
                 76_349_383.42766263,
                 99_111_792.19959265,
                 95_129_837.65413831,
                 71_610_863.07786721,
                 64_911_863.07786743,
                 59_765_674.84257348,
                 49_161_328.175906666,
                 54_872_890.92100507,
                 68_525_536.08229516,
                 85_735_254.43091865,
                 115_722_655.58034456,
                 133_185_604.1517732,
                 115_634_150.63064651,
                 132_640_811.09576282,
                 116_578_114.03693894,
                 74_694_521.4443464,
                 84_752_579.24251245,
                 115_352_515.2425118,
                 137_166_961.3099274,
                 168_605_561.3099274,
                 140_692_276.3784214,
                 181_428_070.02921408,
                 211_263_152.63790965
               ]
             } = TalibEx.ad(@ohlcv)
    end
  end

  describe "add/2" do
    test "should return a list" do
      assert {:ok, [12.0, 14.0, 16.0, 18.0, 20.0, 22.0, 24.0, 26.0, 28.0]} =
               TalibEx.add(1..9, 11..19) |> IO.inspect()
    end

    test "should return error when the lists are not the same length" do
      assert {:error, :all_lists_should_have_same_length} =
               TalibEx.add(1..9, 1..19) |> IO.inspect()
    end
  end

  describe "adosc/2" do
    test "should require fast_period" do
      assert {:error, "fast_period is required and should be between 2 and 100,000"} =
               TalibEx.adosc(@ohlcv, slow_period: 10)
    end

    test "should require slow_period" do
      assert {:error, "slow_period is required and should be between 2 and 100,000"} =
               TalibEx.adosc(@ohlcv, fast_period: 10)
    end

    test "should return a list" do
      assert {
               :ok,
               [
                 :nan,
                 :nan,
                 :nan,
                 :nan,
                 :nan,
                 :nan,
                 :nan,
                 :nan,
                 :nan,
                 :nan,
                 :nan,
                 :nan,
                 :nan,
                 :nan,
                 :nan,
                 :nan,
                 :nan,
                 :nan,
                 :nan,
                 :nan,
                 :nan,
                 :nan,
                 :nan,
                 :nan,
                 28_699_342.635970443,
                 23_616_741.17131853,
                 20_502_870.027594402,
                 21_074_165.247332826,
                 23_499_118.00431408,
                 28_299_647.107428387,
                 28_601_455.323854238,
                 32_702_359.3902051,
                 38_471_724.142064676
               ]
             } = TalibEx.adosc(@ohlcv, fast_period: 10, slow_period: 25)
    end
  end

  describe "sma/2" do
    test "should return a list" do
      assert {:ok, [:nan, 1.5, 2.5, 3.5]} == TalibEx.sma([1, 2, 3, 4], window: 2)
    end

    test "should default window to 5" do
      assert {:ok, [:nan, :nan, :nan, :nan, 3.0, 4.0, 5.0, 6.0, 7.0]} ==
               TalibEx.sma([1, 2, 3, 4, 5, 6, 7, 8, 9])
    end

    test "should accept range" do
      assert {:ok, [:nan, :nan, :nan, :nan, 3.0, 4.0, 5.0, 6.0, 7.0]} ==
               TalibEx.sma(1..9)
    end
  end

  describe "sqrt/1" do
    test "should return a list" do
      assert {:ok, [1.0, 1.4142135623730951, 1.7320508075688772, 2.0]} ==
               TalibEx.sqrt([1, 2, 3, 4])
    end

    test "should accept range" do
      assert {:ok,
              [
                1.0,
                1.4142135623730951,
                1.7320508075688772,
                2.0,
                2.23606797749979,
                2.449489742783178,
                2.6457513110645907,
                2.8284271247461903,
                3.0
              ]} ==
               TalibEx.sqrt(1..9)
    end
  end
end
